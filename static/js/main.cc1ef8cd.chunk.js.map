{"version":3,"sources":["components/WeatherCard/Location.js","components/WeatherCard/Icon.js","components/WeatherCard/Condition.js","components/WeatherCard/component.js","components/WeatherCard/WeatherEngine.js","App.js","serviceWorker.js","index.js"],"names":["Location","country","city","getWheather","useState","query","setQuery","inputMode","setInputMode","City","onClick","onSubmit","e","preventDefault","type","required","value","onChange","target","Country","Container","styled","div","h1","h3","Icon","icon","img","src","alt","Condition","temp","condition","Temp","State","WeatherCard","highColor","lowColor","bg","Math","abs","Card","WeatherEngine","location","weather","setWeather","axios","get","then","res","status","data","current","temp_c","name","text","useEffect","className","App","Navbar","variant","Brand","href","width","height","Jumbotron","Row","Col","md","title","border","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc1ef8cd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useState } from \"react\";\r\n\r\nconst Location = ({ country, city, getWheather }) => {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const [inputMode, setInputMode] = useState(false);\r\n\r\n  return (\r\n    <Container>\r\n      {!inputMode && <City onClick={() => setInputMode(true)}>{city}</City>}\r\n      {inputMode && (\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            getWheather(query);\r\n          }}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            required\r\n            value={query}\r\n            onChange={(e) => setQuery(e.target.value)}\r\n          />\r\n          <button type=\"submit\">Search</button>\r\n          <button onClick={() => setInputMode(false)}>Cancel</button>\r\n        </form>\r\n      )}\r\n      <Country>{country}</Country>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n\r\nconst Container = styled.div`\r\n  text-align: center;\r\n`;\r\nconst City = styled.h1`\r\n  font-size: \"Merriweather\", sans-serif;\r\n  font-size: 1.6rem;\r\n  position: relative;\r\n  cursor: pointer;\r\n  &:hover {\r\n    top: -5px;\r\n  }\r\n`;\r\n\r\nconst Country = styled.h3`\r\n  font-family: \"Fira Sans\", sans-serif;\r\n  font-size: 1.1rem;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Icon = ({ icon }) => {\r\n  const Icon = styled.img`\r\n    width: 40%;\r\n  `;\r\n  return <Icon src={icon} alt=\"Weather Icon\" />;\r\n};\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Condition = ({ temp, condition }) => {\r\n  const Temp = styled.h1`\r\n    font-family: \"Fira Sans\", sans-serif;\r\n    font-size: 2rem;\r\n    font-weight: 200;\r\n  `;\r\n  const State = styled.h3`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 0.8rem;\r\n  `;\r\n\r\n  return (\r\n    <>\r\n      <Temp>{temp}</Temp>\r\n      <State>{condition}</State>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Condition;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport Location from \"./Location\";\r\nimport Icon from \"./Icon\";\r\nimport Condition from \"./Condition\";\r\n\r\nconst WeatherCard = ({ temp, condition, country, city, icon, getWheather }) => {\r\n  let highColor = 0;\r\n  let lowColor = 0;\r\n  let bg = null;\r\n  if (temp > 12) {\r\n    highColor = (1 - (temp - 12) / 28) * 255;\r\n    lowColor = highColor - 200;\r\n    bg = `linear-gradient(\r\n      to top,\r\n      rgba(255, ${highColor}, 0),\r\n      rgba(255, ${Math.abs(lowColor)}, 0)\r\n    )`;\r\n  } else if (temp <= 12) {\r\n    highColor = (1 - (temp + 20) / 32) * 255;\r\n    lowColor = highColor - 200;\r\n    bg = `linear-gradient(\r\n      to top,\r\n      rgba(0, ${highColor}, 255),\r\n      rgba(0, ${Math.abs(lowColor)}, 255)\r\n    )`;\r\n  }\r\n\r\n  const Card = styled.div`\r\n    margin: 0 auto;\r\n    background: ${bg};\r\n    display: flex;\r\n    padding: 10px;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    border-radius: 15px;\r\n  `;\r\n  return (\r\n    <Card>\r\n      <Location city={city} country={country} getWheather={getWheather} />\r\n      <Icon icon={icon} />\r\n      <Condition temp={temp} condition={condition} />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport WeatherCard from \"./component\";\r\n\r\nconst WeatherEngine = ({ location }) => {\r\n  const [weather, setWeather] = useState({\r\n    temp: null,\r\n    city: null,\r\n    country: null,\r\n    condition: null,\r\n    icon: null,\r\n  });\r\n\r\n  const getWheather = (city) => {\r\n    axios\r\n      .get(\r\n        `https://api.weatherapi.com/v1/current.json?key=f4ac401d188e480496270919202505&q=${city}`\r\n      )\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          setWeather({\r\n            temp: res.data.current.temp_c,\r\n            city: res.data.location.name,\r\n            country: res.data.location.country,\r\n            condition: res.data.current.condition.text,\r\n            icon: res.data.current.condition.icon,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWheather(location);\r\n  }, [location]);\r\n  return (\r\n    <div className=\"App\">\r\n      <WeatherCard\r\n        temp={weather.temp}\r\n        condition={weather.condition}\r\n        city={weather.city}\r\n        country={weather.country}\r\n        icon={weather.icon}\r\n        getWheather={getWheather}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherEngine;\r\n","import React from \"react\";\n\nimport { Container, Row, Col, Navbar, Jumbotron } from \"react-bootstrap\";\n\nimport WeatherEngine from \"./components/WeatherCard/WeatherEngine\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          <img\n            alt=\"\"\n            src=\"/logo192.png\"\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />{\" \"}\n          React Wheather\n        </Navbar.Brand>\n      </Navbar>\n      <Jumbotron>\n        <Container>\n          <Row className=\"justify-content-md-center\">\n            <Col>\n              <WeatherEngine location=\"Calicut\" />\n            </Col>\n            <Col>\n              <WeatherEngine location=\"Kalpetta\" />\n            </Col>\n            <Col>\n              <WeatherEngine location=\"Kochi\" />\n            </Col>\n            <Col>\n              <WeatherEngine location=\"Trivandrum\" />\n            </Col>\n          </Row>\n        </Container>\n      </Jumbotron>\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"auto\">\n          <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\">\n            <img\n              src=\"//cdn.weatherapi.com/v4/images/weatherapi_logo.png\"\n              alt=\"Weather data by WeatherAPI.com\"\n              border=\"0\"\n            />\n          </a>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}